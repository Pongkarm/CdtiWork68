# üß† ‡πÇ‡∏à‡∏ó‡∏¢‡πå: Word Ladder Transformation
# ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ladder_length(begin_word, end_word, word_list)
# ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≥‡∏à‡∏≤‡∏Å begin_word ‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô end_word ‡πÇ‡∏î‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 1 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡πÅ‡∏•‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô word_list ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

# ‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á:

# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 1 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£

# ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô word_list

# ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà "‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î" ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å begin_word ‚Üí end_word

# ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ return 0

from collections import deque

def ladder_length(begin_word, end_word, word_list):
    word_set = set(word_list)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô set ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß
    if end_word not in word_set:
        return 0  # ‡∏ñ‡πâ‡∏≤ end_word ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô list ‡∏Å‡πá‡πÑ‡∏õ‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô

    queue = deque()
    queue.append((begin_word, 1))  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà begin_word ‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡πâ‡∏≤‡∏ß = 1
    visited = set()  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏ß‡∏ô‡∏•‡∏π‡∏õ

    while queue:
        current_word, steps = queue.popleft()

        if current_word == end_word:
            return steps  # ‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡πá return ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡πâ‡∏≤‡∏ß‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢

        for i in range(len(current_word)):
            for c in 'abcdefghijklmnopqrstuvwxyz':
                # ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á i
                next_word = current_word[:i] + c + current_word[i+1:]
                
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô word_set ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ
                if next_word in word_set and next_word not in visited:
                    queue.append((next_word, steps + 1))  # ‡πÉ‡∏™‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏ß‡∏Å‡∏Ç‡∏±‡πâ‡∏ô
                    visited.add(next_word)  # ‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ß‡∏ô‡∏°‡∏≤‡∏≠‡∏µ‡∏Å

    return 0  # ‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡∏≥‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á ‡∏Å‡πá‡πÑ‡∏õ‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á

begin = "hit"
end = "cog"
words = ["hot", "dot", "dog", "lot", "log", "cog"]

print(ladder_length(begin, end, words))
